<script type="text/javascript">
//<![CDATA[
	/** 
	* Magento Enhanced Ecommerce Event Tracking for Google Tag Manager
	*
	* @author Angel Kostadinov
	* @see http://www.anowave.com/marketplace/magento-extensions/magento-google-tag-manager-enhanced-ecommerce-ua-tracking/
	* @copyright 2015 Anowave
	* @version 1.0
	*/
	var EC = [], Purchase = [], FacebookProducts = [];

	window.dataLayer = window.dataLayer || [];

	/* Dynamic remarketing */
	window.google_tag_params = window.google_tag_params || {};

	/* Default pagetype */
	window.google_tag_params.ecomm_pagetype = 'other';

	/* Set ecomm_pagetype */
	<?php if(Mage::getSingleton('cms/page')->getIdentifier() == 'home'  && Mage::app()->getFrontController()->getRequest()->getRouteName() == 'cms') : ?>
	
	window.google_tag_params.ecomm_pagetype = 'home';
	
	<?php endif; ?>

	/* Grouped products collection */
	window.G = [];

	/**
	 * Global revenue 
	 */
	window.revenue = 0;

	/**
	 * DoubleClick
	 */
	window.DoubleClick = 
	{
		DoubleClickRevenue:	 	0,
		DoubleClickTransaction: 0,
		DoubleClickQuantity: 	0
	}

	/**
	* EC Purchase
	*
	*/
	<?php if ($this->getOrderIds()) : ?>
		<?php 
			$collection = Mage::getResourceModel('sales/order_collection')->addFieldToFilter('entity_id', array
			(
				'in' => $this->getOrderIds())
			);
			
			foreach ($collection as $order) 
			{
				?>
				var purchaseProducts = [], ecomm = 
				{
						i: [], /* ecomm_prodid[] array */
						v: [], /* ecomm_pvalue[] array */
						p: []  /* ecomm_pname[]  array */
				};
				
				<?php 
				
				if ($order->getIsVirtual()) 
				{
					$address = $order->getBillingAddress();
				} 
				else 
				{
					$address = $order->getShippingAddress();
				}
				
				foreach ($order->getAllVisibleItems() as $item) 
				{
					$product = Mage::getModel('catalog/product')->load
					(	
						$item->getProductId()
					);
					
					$collection = $product->getCategoryIds();
					
					if (!$collection)
					{
						$collection[] = Mage::app()->getStore()->getRootCategoryId();
					}
					
					$category = Mage::getModel('catalog/category')->load
					(
						end($collection)
					);
					
					/**
					 * Get product name
					 */
					$args = new stdClass();
					
					$args->id 	= $product->getSku();
					$args->name = $product->getName();
					
					?>

					var entity = {}, variant = [];


					<?php 	
					
						$parents = Mage::getModel('catalog/product_type_configurable')->getParentIdsByChild
						(
							$product->getId()
						);
						
						if ($parents && isset($parents[0]))
						{
							$parents = $parents[0];
							/**
							 * Get parent product(s)
							 */
							$parent = Mage::getModel('catalog/product')->load((int) $parents);
							
							/**
							 * Change name to parent product name and pass variant instead
							 */
							if ($parent->getId())
							{
								$args->id	= $parent->getSku();
								$args->name = $parent->getName();
								
								/**
								 * Use parents category
								 */
								$collection = $parent->getCategoryIds();
									
								if (!$collection)
								{
									$collection[] = Mage::app()->getStore()->getRootCategoryId();
								}
									
								$category = Mage::getModel('catalog/category')->load
								(
									end($collection)
								);
							}
		
							$variant = array();
						
							if ($item instanceof Mage_Sales_Model_Quote_Item) 
							{
								$request = new Varien_Object(unserialize($item->getOptionByCode('info_buyRequest')->getValue()));
							} 
							else if ($item instanceof Mage_Sales_Model_Order_Item) 
							{
								$request = new Varien_Object($item->getProductOptions());
							}
						
							$options = $request->getData('info_buyRequest');
							
							if (isset($options['super_attribute']) && is_array($options['super_attribute']))
							{
								foreach ($options['super_attribute'] as $id => $option)
								{
									$attribute = Mage::getModel('catalog/resource_eav_attribute')->load($id);
									
									if ($attribute->usesSource()) 
									{
										$variant[] = join(':', array
										(
											$attribute->getFrontendLabel(), 
											$attribute->getSource()->getOptionText($option)
										));
									}
								}
							}
							
							/**
							 * Push variant(s)
							 */
							foreach ($variant as $value)
							{
								?>
									variant.push('<?php echo $value ?>');
								<?php 
							}
						}
					?>

					entity['name'] 		= '<?php echo Mage::helper('core')->jsQuoteEscape($args->name) ?>';
					entity['id'] 		= '<?php echo $args->id ?>';
					entity['price'] 	= '<?php echo $this->getPriceItem($item, $order) ?>';
					entity['quantity'] 	= '<?php echo $item->getQtyOrdered() ?>';
					entity['category'] 	= '<?php echo Mage::helper('core')->jsQuoteEscape($category->getName()) ?>';
					entity['variant'] 	= variant.join(VARIANT_SEPARATOR);

					/* Add custom dimensions */					
					<?php foreach ($this->getDimensions($product, $order, Mage::getSingleton('customer/session')->getCustomer()) as $dimension => $value) : ?>
	
					entity['<?php echo $dimension ?>'] = '<?php echo $value ?>';
					
					<?php endforeach; ?>

					/* Push entity to purchase product collection */
					purchaseProducts.push(entity);

					ecomm.i.push('<?php echo $args->id ?>');
					ecomm.v.push('<?php echo $product->getFinalPrice() ?>');
					ecomm.p.push('<?php echo Mage::helper('core')->jsQuoteEscape($args->name) ?>');

					/**
					 * Update FacebookProducts[] array with SKU
					 */
					FacebookProducts.push(entity.id);
					<?php
				}
				
				/* Sales coupon */
				$coupon = null;
				
				if ($order->getCouponCode())
				{
					$code = Mage::getModel('salesrule/coupon')->load($order->getCouponCode(), 'code');
					
					if ($code)
					{
						$rule = Mage::getModel('salesrule/rule')->load
						(
							$code->getRuleId()
						);
						
						$coupon = $rule->getName();
					}	
				}

				?>

				if (purchaseProducts.length)
				{
					var data = 
					{
						'ecommerce': 
						{
							'currencyCode': '<?php echo Mage::app()->getStore()->getCurrentCurrencyCode() ?>',
							'purchase': 
							{
								'actionField': 
								{
									'id': 			'<?php echo $order->getIncrementId() ?>',
									'affiliation': 	'<?php echo $this->jsQuoteEscape(Mage::app()->getStore()->getFrontendName()) ?>',
									'revenue': 		'<?php echo $this->getRevenue($order) ?>',
									'tax':			'<?php echo $order->getBaseTaxAmount() ?>',
									'shipping': 	'<?php echo $order->getBaseShippingAmount() ?>',
									'coupon':		'<?php echo $this->jsQuoteEscape($coupon) ?>'
								},
								'products': purchaseProducts
							}
						}
					}

					/**
					 * Push purchase data
					 */
					Purchase.push(data);


					/**
					 * AdWords Dynamic Remarketing
					 */
					if (window.google_tag_params)
					{
						window.google_tag_params.ecomm_pagetype 	= 'purchase';
						
						window.google_tag_params.ecomm_prodid 		= ecomm.i;
						window.google_tag_params.ecomm_pvalue		= ecomm.v;
						window.google_tag_params.ecomm_pname		= ecomm.p;
						window.google_tag_params.ecomm_totalvalue 	= '<?php echo $this->getRevenue($order) ?>';
					}

					<?php if ($this->getAdwords()->getGoogleConversionId()) : ?>

						window.google_conversion_id 		= <?php echo $this->getAdwords()->getGoogleConversionId() ?>;
						
						window.google_conversion_value 		= '<?php echo $this->getRevenue($order) ?>';
						window.google_conversion_language 	= '<?php echo $this->getAdwords()->getGoogleConversionLanguage() ?>';
						window.google_conversion_format 	= '<?php echo $this->getAdwords()->getGoogleConversionFormat() ?>';
						window.google_conversion_label 		= '<?php echo $this->getAdwords()->getGoogleConversionLabel() ?>';
						window.google_conversion_color		= '<?php echo $this->getAdwords()->getGoogleConversionColor() ?>';
						window.google_conversion_currency 	= '<?php echo $this->getAdwords()->getGoogleConversionCurrency() ?>';
					
					<?php endif ?>
					
					/**
					 * Set revenue in global variable
					 */
					window.revenue = data.ecommerce.purchase.actionField.revenue;

					/**
					 * Set DoubleClick FloodLight Sales Revenue
					 */
					window.DoubleClick.DoubleClickRevenue 		= data.ecommerce.purchase.actionField.revenue;
					window.DoubleClick.DoubleClickTransaction 	= data.ecommerce.purchase.actionField.id;
					window.DoubleClick.DoubleClickQuantity 		= purchaseProducts.length;

					/**
					 * Push DoubleClick to purchase
					 */
					Purchase.push(window.DoubleClick);
				}

				<?php 
			}
		?>
		
		
	<?php endif ?>

	if (Purchase.length)
	{
		EC.push(function(dataLayer)
		{
			for (i = 0, l = Purchase.length; i < l; i++)
			{
				dataLayer.push(Purchase[i]);
			}
		});

		/**
		 * Facebook Pixel Tracking
		 */
		<?php if ($this->helper('ec')->facebook()): ?>

			if ("undefined" !== typeof window._fbq)
			{
				window._fbq.push(["track", "Purchase", 
				{
					content_ids:	FacebookProducts,
					content_type: 	'product',
					value: 			window.revenue,
					currency: 		'<?php echo Mage::app()->getStore()->getCurrentCurrencyCode() ?>'
				}]);
			}

		<?php endif ?>
	}	
//]]>	
</script>
<?php if ($this->getOrderIds() && $this->getAdwords()->getGoogleConversionId()) : ?>
	<script type="text/javascript" src="//www.googleadservices.com/pagead/conversion.js"></script>
    <?php $collection = Mage::getResourceModel('sales/order_collection')->addFieldToFilter('entity_id', array('in' => $this->getOrderIds())); ?>
    <?php foreach ($collection as $order): ?>
            <noscript><img height=1 width=1 border=0 src="//www.googleadservices.com/pagead/conversion/<?php echo $this->getAdwords()->getGoogleConversionId() ?>/?value=<?php echo $this->getRevenue($order) ?>&label=<?php echo $this->getAdwords()->getGoogleConversionLabel() ?>&script=0"></noscript>
    <?php endforeach; ?>
<?php endif; ?>