<script type="text/javascript">
//<![CDATA[
	window.dataLayer = window.dataLayer || [], collection = [], AEC = {}, VARIANT_SEPARATOR = '<?php echo VARIANT_SEPARATOR ?>';

	/**
	 * Timing contats
	 */
	AEC.Const = 
	{
		TIMING_CATEGORY_ADD_TO_CART:		'Add To Cart Time',
		TIMING_CATEGORY_REMOVE_FROM_CART:	'Remove From Cart Time',
		TIMING_CATEGORY_PRODUCT_CLICK:		'Product Detail Click Time',
		TIMING_CATEGORY_CHECKOUT:			'Checkout Time',
		TIMING_CATEGORY_CHECKOUT_STEP:		'Checkout Step Time'
	};
	
	AEC.ajax = function(context,dataLayer)
	{
		var element = jQuery(context), qty = jQuery(':radio[name=qty]:checked, :text[name=qty], select[name=qty]').eq(0).val(), variant = [];

		if (!AEC.gtm())
		{
			/**
			 * Invoke original click event(s)
			 */
			if (element.data('click'))
			{
				/**
				 * Track time 
				 */
				AEC.Time.track(dataLayer, AEC.Const.TIMING_CATEGORY_ADD_TO_CART, element.data('name'), element.data('category'));
				
				eval(element.data('click'));
			}
			
			return true;
		}

		if(element.data('configurable'))
		{
			var attributes = jQuery('[name^="super_attribute"]'), variants = [];

			/**
			 * Load super attsibutes
			 */

			 var SUPER = [];

			 <?php
				 try 
				 {
				 	if (Mage::registry('current_product'))
				 	{
					 	$product = Mage::getModel('catalog/product')->load
					 	(
					 		Mage::registry('current_product')->getId()
					 	);
					 	
					 	if ($product->isConfigurable())
					 	{
						 	$attributes = $product->getTypeInstance(true)->getConfigurableAttributes($product);
						 	
						 	foreach($attributes as $attribute)
						 	{
						 		$object = $attribute->getProductAttribute();
						 		 
						 		?>
						 		
						 		var data = 
							 	{
					 				id: 	'<?php echo $object->getAttributeId() ?>',
									label: 	'<?php echo $object->getStoreLabel() ?>'
								}
	
								SUPER.push(data);
						 		<?php 
						 	}
						}
				 	}
				 }
				 catch (Exception $e)
				 {
				 	
				 }
			?>

			jQuery.each(attributes, function(index, attribute)
			{
				if (jQuery(attribute).is('select'))
				{
					var name = jQuery(attribute).attr('name'), id = name.substring(name.indexOf('[') + 1, name.lastIndexOf(']'));

					var option = jQuery(attribute).find('option:selected');

					if (0 < parseInt(option.val()))
					{
						variants.push(
						{
							id: 	id,
							text: 	option.text()
						});
					}
				}
			});

			if (attributes.length == variants.length)
			{
				for (i = 0, l = variants.length; i < l; i++)
				{
					for (a = 0, b = SUPER.length; a < b; a++)
					{
						if (SUPER[a].id == variants[i].id)
						{
							variant.push(
							[
								SUPER[a].label,
								variants[i].text
							].join(':'));
						}
					}
				}
			}

			if (!variant.length)
			{
				return false;
			}
		}

		if (element.data('grouped'))
		{
			for (u = 0, y = window.G.length; u < y; u++)
			{
				var qty = Math.abs(jQuery('[name="super_group[' + window.G[u].id + ']"]').val());

				if (qty)
				{
					collection.push(
					{
						'name': 		window.G[u].name,
						'id': 		    window.G[u].sku,
						'price': 		window.G[u].price,
						'category': 	window.G[u].category,
						'brand':		window.G[u].brand,
						'quantity': 	qty
					})
				}
			}
		}
		else
		{
			collection.push(
			{
				'name': 		element.data('name'),
				'id': 		    element.data('id'),
				'price': 		element.data('price'),
				'category': 	element.data('category'),
				'brand':		element.data('brand'),
				'variant':		variant.join(VARIANT_SEPARATOR),
				'quantity': 	qty
			})
		}
		
		var data = 
		{
			'event': 'addToCart',
			'eventLabel': element.data('name'),
			'ecommerce': 
			{
				'currencyCode': '<?php echo Mage::app()->getStore()->getCurrentCurrencyCode() ?>',
				'add': 
				{
					'products': collection
				}
			}
		}

		/**
		 * Track event
		 */
		dataLayer.push(data);

		/**
		 * Track time 
		 */
		AEC.Time.track(dataLayer, AEC.Const.TIMING_CATEGORY_ADD_TO_CART, element.data('name'), element.data('category'));
		
		/**
		 * Invoke original click event(s)
		 */
		if (element.data('click'))
		{
			eval(element.data('click'));
		}

		/**
		 * Facebook Pixel Tracking
		 */
		<?php if ($this->helper('ec')->facebook()): ?>

			if ("undefined" !== typeof window._fbq)
			{
				var fb = [], price = 0;
	
				for (i = 0, l = collection.length; i < l; i++)
				{
					fb.push(collection[i].id);

					/**
					 * Accumulative price
					 */
					price += parseFloat(collection[i].price);
				}
	
				window._fbq.push(['track', 'PixelInitialized', {}]);
				window._fbq.push(['track', 'AddToCart', 
				{
					content_name: 'Shopping Cart',
					content_ids: 	fb,
					content_type: 	'product',
					value: 			price,
					currency: 		'<?php echo Mage::app()->getStore()->getCurrentCurrencyCode() ?>'
				}]);
			}
		
		<?php endif ?> 
		
		return productAddToCartForm.submit(context);
	}
	
	
	AEC.remove = function(context, dataLayer)
	{
		var element = jQuery(context);
		
		if (!AEC.gtm())
		{
			/**
			 * Track time 
			 */
			AEC.Time.track(dataLayer, AEC.Const.TIMING_CATEGORY_REMOVE_FROM_CART, element.data('name'), element.data('category'));
			
			return true;
		}

		var data = 
		{
			'event': 'removeFromCart',
			'eventLabel': element.data('name'),
			'ecommerce': 
			{
				'remove': 
				{   
					'products': 
					[
						{ 
							'name': 		element.data('name'),
							'id': 			element.data('id'),
							'price': 		element.data('price'),
							'category': 	element.data('category'),
							'quantity': 	element.data('quantity')
						}
					]
				}
			}
		}

		
		if (confirm('Are you sure you would like to remove this item from the shopping cart?'))
		{
			/**
			 * Track event
			 */
			dataLayer.push(data);

			/**
			 * Track time 
			 */
			AEC.Time.track(dataLayer, AEC.Const.TIMING_CATEGORY_REMOVE_FROM_CART, element.data('name'));

			return true;	
		}
		
		return false;
	}

	AEC.click = function(context,dataLayer)
	{
		var element = jQuery(context);
		
		if (!AEC.gtm())
		{
			/**
			 * Track time 
			 */
			AEC.Time.track(dataLayer, AEC.Const.TIMING_CATEGORY_PRODUCT_CLICK, element.data('name'), element.data('category'));
			
			return true;
		}

		var data = 
		{
			'event': 'productClick',
			'eventLabel': element.data('name'),
			'ecommerce': 
			{
				'click': 
				{
					'actionField': 
					{
						'list': element.data('category')
					},
					'products': 
					[
						{
							'name': 		element.data('name'),
							'id': 			element.data('id'),
							'price': 		element.data('price'),
							'category': 	element.data('category'),
							'quantity': 	element.data('quantity')
						}
					]
				}
			},
			'eventCallback': function() 
			{
				if (element.data('click'))
				{
					eval(element.data('click'));
				}
				else if (element.is('a'))
				{
					document.location = element.attr('href');
				}
				else 
				{
					return true;
				}
	     	}
						
		};

		/**
		 * Push data
		 */
		dataLayer.push(data);

		/**
		 * Track time 
		 */
		AEC.Time.track(dataLayer, AEC.Const.TIMING_CATEGORY_PRODUCT_CLICK, element.data('name'), element.data('category'));

		return false;
	}
	
	AEC.gtm = function()
	{
		if ("undefined" === typeof google_tag_manager)
		{
			/**
			 * Log error to console
			 */
			log('Unable to detect Google Tag Manager. Please verify if GTM install snippet is available.');
			
			return false;
		}

		return true;
	}


	/**
	 * User timing
	 */

	AEC.Time = (function()
	{
		var T = 
		{
			event: 			'trackTime',
			timingCategory:	'',
			timingVar:		'',
			timingValue:	-1,
			timingLabel:	''
		}

		var time = new Date().getTime();
		
		return {
			track: function(dataLayer, category, variable, label)
			{
				T.timingValue = (new Date().getTime()) - time;
				
				if (category)
				{
					T.timingCategory = category;
				}

				if (variable)
				{
					T.timingVar = variable;
				}

				if (label)
				{
					T.timingLabel = label;
				}
				
				/**
				 * Track time
				 */
				dataLayer.push(T);
			},
			trackContinue: function(dataLayer, category, variable, label)
			{
				this.track(dataLayer, category, variable, label);

				/**
				 * Reset time
				 */
				time = new Date().getTime();
			}
		}
	})();

	var log = function (message) 
	{
	   	window.console && console.log ? console.log(message) : null;
	};

	<?php if ($this->helper('ec')->facebook()): ?>
		(function() 
		{
			var _fbq = window._fbq || (window._fbq = []);
			
			if (!_fbq.loaded) 
			{
				var fbds = document.createElement('script');
				fbds.async = true;
				fbds.src = '//connect.facebook.net/en_US/fbds.js';
				var s = document.getElementsByTagName('script')[0];
				s.parentNode.insertBefore(fbds, s);
				_fbq.loaded = true;
			}
			
			_fbq.push(['addPixelId', '<?php echo Mage::getStoreConfig('ec/facebook/addPixelId')?>']);
			
		})();
	
		window._fbq = window._fbq || [];
		window._fbq.push(["track", "PixelInitialized", {}]);
	<?php endif ?>
//]]>	
</script>