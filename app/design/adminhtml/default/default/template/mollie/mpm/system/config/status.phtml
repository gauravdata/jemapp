<?php
/**
 * Copyright (c) 2012-2018, Mollie B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 *
 * @category    Mollie
 * @package     Mollie_Mpm
 * @author      Mollie B.V. (info@mollie.nl)
 * @copyright   Copyright (c) 2012-2018 Mollie B.V. (https://www.mollie.nl)
 * @license     http://www.opensource.org/licenses/bsd-license.php  BSD-License 2
 */

$countries = $this->mollieHelper->getCountryOptionArray();

$storeId = $this->mollieHelper->getConfigStoreId();
$websiteId = $this->mollieHelper->getConfigWebsiteId();
$apiKey = $this->mollieHelper->getApiKey($storeId, $websiteId);

if (empty($apiKey)) {
    $message = $this->mollieHelper->__('API Key: Empty value');
    $methods = array();
} else {
    $methods = $this->mollieHelper->getPaymentMethods($apiKey);
}

if (is_string($methods)) {
    $message = $methods;
    $methods = array();
}

$methodCount = 0;
foreach ($methods as $method) {
    if ($method['available']) {
        $methodCount++;
    }
}

?>
<tr>
    <td>
        <b><?php echo $this->mollieHelper->__('Payment methods'); ?></b><br/>
        <?php if ($methodCount > 0) { ?>
            <?php
            if ($methodCount !== 1) {
                echo $this->mollieHelper->__('%d payment methods available:', $methodCount);
            } else {
                echo $this->mollieHelper->__('One payment method available:');
            }
            ?>
            <table class="mollietable">
                <tr>
                    <th class="title"><?php echo $this->mollieHelper->__('Title'); ?></th>
                    <th class="checkbox"><?php echo $this->mollieHelper->__('Default'); ?></th>
                    <th class="description"><?php echo $this->mollieHelper->__('Description'); ?></th>
                    <th class="countries"><?php if ($storeId == 0) {
                            echo $this->mollieHelper->__('Allowed countries');
                        } ?></th>
                    <th class="sort"><?php echo $this->mollieHelper->__('Sort Order'); ?></th>
                </tr>
                <?php
                foreach ($methods as $key => $method) {

                    $configKey = 'mpm_void_' . str_pad($key, 2, "0", STR_PAD_LEFT);
                    $sortOrder = $this->mollieHelper->getMethodSortOrder($configKey, $storeId);
                    $title = $this->mollieHelper->getMethodTitle($configKey, $storeId);
                    $allowSpecific = $this->mollieHelper->getMethodAllowSpecific($configKey, $storeId);
                    $specificCountry = $this->mollieHelper->getMethodSpecificCountry($configKey, $storeId);

                    if ($method['available']) {
                        ?>
                        <tr>
                            <td class="value">
                                <input type="text"
                                       name="groups[<?php echo $configKey; ?>][fields][title][value]"
                                       value="<?php echo $title ?: $this->mollieHelper->__($method['description']); ?>"
                                       class="input-text <?php echo($title ?: 'disabled'); ?>"
                                />
                            </td>
                            <td class="use-default">
                                <input id="payment_<?php echo $configKey; ?>_apikey_inherit"
                                       name="groups[<?php echo $configKey; ?>][fields][title][inherit]"
                                       type="checkbox" value="1"
                                       class="checkbox config-inherit"
                                    <?php echo $title ?: ' checked="checked"'; ?>
                                       onclick="toggleValueElements(this, Element.previous(this.parentNode))">
                            </td>
                            <td>
                                <?php echo $this->mollieHelper->__($method['description']); ?>
                            </td>
                            <td class="value">
                                <?php if ($storeId == 0) { ?>
                                    <select id="payment_<?php echo $configKey; ?>_allowspecific"
                                            name="groups[<?php echo $configKey; ?>][fields][allowspecific][value]"
                                            class=" select">
                                        <option value="0" <?php if (!$allowSpecific): ?>selected="selected"<?php endif; ?>><?php echo $this->mollieHelper->__('All Allowed Countries'); ?></option>
                                        <option value="1" <?php if ($allowSpecific): ?>selected="selected"<?php endif; ?>><?php echo $this->mollieHelper->__('Specific Countries'); ?></option>
                                    </select>
                                    <script type="text/javascript">
                                        Event.observe('payment_<?php echo $configKey; ?>_allowspecific', 'change', function () {
                                            specific = $('payment_<?php echo $configKey; ?>_allowspecific').value;
                                            $('payment_<?php echo $configKey; ?>_specificcountry').disabled = (!specific || specific != 1);
                                            $('payment_<?php echo $configKey; ?>_specificcountry').toggle();
                                        });
                                    </script>
                                    <br/><br/>
                                    <select id="payment_<?php echo $configKey; ?>_specificcountry"
                                            name="groups[<?php echo $configKey; ?>][fields][specificcountry][value][]"
                                            class=" select multiselect"
                                            size="10"
                                            <?php if (!$allowSpecific): ?>disabled="disabled"<?php endif; ?>
                                            multiple="multiple"
                                            <?php if (!$allowSpecific): ?>style="display: none;"<?php endif; ?>
                                    <?php foreach ($countries

                                    as $country) { ?>
                                    <?php $selected = (in_array($country['value'],
                                            $specificCountry) || $country['value'] == $specificCountry) ? true : false; ?>
                                    <option value="<?php echo $country['value']; ?>" <?php if ($allowSpecific && $selected): ?>selected="selected"<?php endif; ?>>
                                        <?php echo $country['label']; ?>
                                    </option>
                                <?php } ?>
                                    </select>
                                <?php } ?>
                            </td>
                            <td>
                                <input id="payment<?php echo $configKey; ?>_sort_order"
                                       name="groups[<?php echo $configKey; ?>][fields][sort_order][value]"
                                       value="<?php echo $sortOrder; ?>"
                                       style="width:40px;"/>
                            </td>
                        </tr>
                        <?php
                    }
                }
                ?>
            </table>
        <?php } else { ?>
            <?php echo $this->mollieHelper->__('No payment methods available for this account.<br />Reason: %s',
                $message); ?>
        <?php } ?>
        <br/>
        <script type="text/javascript">
            if (!window.pushDownPaypal) window.pushDownPaypal = function () {
                var i, notice = document.getElementsByClassName('paypal-payment-notice');
                for (i = 0; i < notice.length; i++) {
                    notice[i].style.marginTop = '50px';
                }
            }
            if (document.addEventListener) {
                document.addEventListener("DOMContentLoaded", pushDownPaypal, false);
            } else if (document.attachEvent) {
                document.attachEvent("onreadystatechange", pushDownPaypal);
            }
        </script>
    </td>
</tr>